abline(v=original_tstat, col="red")
pvalue <- sum(tstats < tstat)/length(tstats)
pvalue
for (i in seq(1:samples)) {
syntheticY <- orig_intercept + x + sample(resids, N, replace=TRUE)
syntheticY
newmod <- lm(syntheticY~x)
beta1 <- summary(newmod)$coefficients['x',1]
se <-  summary(newmod)$coefficients['x',2]
tstat <- (newmod$coefficients['x'])/(se)
tstats <- c(tstats, tstat)
}
hist(tstats, breaks = 40)
abline(v=original_tstat, col="red")
summary(newmod)$coefficients['x',2]
summary(newmod)$coefficients
(newmod$coefficients['x'])/(se)
##### Advanced Econometric Models and Methods #####
#
# Lucas Paul Unterweger, Sophia Oberbrinkmann
#
# Exercise 3: Bootstraping
# Setup
set.seed(11913169)
# Data Intake
y <- c(0.79, 4.8, 4.5, -1.6, 0.6, 5.5, 5.5, -3.9, 0.6, 0.1)
x <- c(3.2, 1.4, 3.8, -2.4, 5.6, 4.5, 5.3, -3.1, 8.2, -0.6)
# Standard t-Test
mod <- lm(y~x)
summary(mod)
beta1 <- summary(mod)$coefficients['x',1]
se <-  summary(mod)$coefficients['x',2]
original_tstat <- (mod$coefficients['x']-1)/(se)
original_tstat
# Bootstraping Test
resids <- residuals(mod)
fitted <- fitted(mod)
orig_intercept <- summary(mod)$coefficients[1,1]
N <- length(y) # Get number of observations
samples <- 20000
tstats <- vector() # Create an empty vector for the t stats
# Boostraping Loop
for (i in seq(1:samples)) {
syntheticY <- orig_intercept + x + sample(resids, N, replace=TRUE) # Create the synthetic y
syntheticY
newmod <- lm(syntheticY~x) # Compute the models
beta1 <- summary(newmod)$coefficients['x',1]
se <-  summary(newmod)$coefficients['x',2]
tstat <- (newmod$coefficients['x']-1)/(se) # Compute the respective t statistics
tstats <- c(tstats, tstat)
}
# Plot the results
hist(tstats, breaks = 40)
abline(v=original_tstat, col="red")
pvalue <- sum(tstats < tstat)/length(tstats)
pvalue
tstats < tstat
sum(tstats < tstat)
length(tstats)
count(tstats < tstat)
tstats
tstat
pvalue <- count(tstats < original_tstat)/length(tstats)
pvalue
pvalue <- sum(tstats < original_tstat)/length(tstats)
pvalue
# Plot the results
hist(tstats, breaks = 60)
abline(v=original_tstat, col="red")
# Plot the results
hist(tstats, breaks = 60)
abline(v=original_tstat, col="red")
# Plot the results
hist(tstats, breaks = 100)
abline(v=original_tstat, col="red")
pvalue <- sum(tstats < original_tstat)/length(tstats)
sort(sampled_t)[0.025*r]
sort(tstats)[0.025*r]
# Plot the results
hist(tstats, breaks = (100), xlim = (c(-5,15)))
# Plot the results
hist(tstats, breaks = (100), xlim = (c(-10,10)))
abline(v = original_tstat, col = "red")
abline(v = sort(sampled_t)[0.025*N], col = "blue")
abline(v = sort(tstats)[0.025*N], col = "blue")
abline(v = sort(tstats)[0.975*N], col = "blue")
hist(tstats, breaks = 100)
# Plot the results
hist(tstats, breaks = (100), xlim = (c(-10,10)))
abline(v = original_tstat, col = "red")
abline(v = sort(tstats)[0.025*N], col = "blue")
abline(v = sort(tstats)[0.975*N], col = "blue")
sort(tstats)
sort(tstats)[0.975*N]
# Plot the results
hist(tstats, breaks = (100), xlim = (c(-10,10)))
abline(v = original_tstat, col = "red")
abline(v = sort(tstats)[0.025*samples], col = "blue")
abline(v = sort(tstats)[0.975*samples], col = "blue")
summary(mod)
original_tstat
(0.4962-1)/0.2564
text(x=7.5, y=0.025*r, labels=paste0("Critical values:\n(",
round(sort(tstats)[0.025*samples], 2),
", ",
round(sort(tstats)[0.975*samples], 2),
")"), col = "blue")
text(x=7.5, y=0.025*samples, labels=paste0("Critical values:\n(",
round(sort(tstats)[0.025*samples], 2),
", ",
round(sort(tstats)[0.975*samples], 2),
")"), col = "blue")
text(x=7.5, y=0.015*samples, labels=paste0("Model t-value:\n(",
round(original_tstat,3),
")"), col = "red")
text(x=7.5, y=0.025*samples, labels=paste0("Critical values:\n(",
round(sort(tstats)[0.025*samples], 4),
", ",
round(sort(tstats)[0.975*samples], 4),
")"), col = "blue")
text(x=7.5, y=0.015*samples, labels=paste0("Model t-value:\n(",
round(original_tstat,3),
")"), col = "red")
# Plot the results (CODE VON MAX)
hist(tstats, breaks = (100), xlim = (c(-10,10)))
abline(v = original_tstat, col = "red")
abline(v = sort(tstats)[0.025*samples], col = "blue")
abline(v = sort(tstats)[0.975*samples], col = "blue")
text(x=7.5, y=0.025*samples, labels=paste0("Critical values:\n(",
round(sort(tstats)[0.025*samples], 4),
", ",
round(sort(tstats)[0.975*samples], 4),
")"), col = "blue")
text(x=7.5, y=0.015*samples, labels=paste0("Model t-value:\n(",
round(original_tstat,3),
")"), col = "red")
orig_intercept
resids
# Standard t-Test
mod <- lm(y~x)
summary(mod)
step1 <- lm((y - x) ~ 1, data = bootdata)
step1 <- lm((y - x) ~ 1)
summary(mod1)
summary(step1)
orig_intercept <- summary(lm((y-x)~1))$coefficients[1,1]
##### Advanced Econometric Models and Methods #####
#
# Lucas Paul Unterweger, Sophia Oberbrinkmann
#
# Exercise 3: Bootstraping
# Setup
set.seed(11913169)
# Data Intake
y <- c(0.79, 4.8, 4.5, -1.6, 0.6, 5.5, 5.5, -3.9, 0.6, 0.1)
x <- c(3.2, 1.4, 3.8, -2.4, 5.6, 4.5, 5.3, -3.1, 8.2, -0.6)
# Standard t-Test
mod <- lm(y~x)
summary(mod)
beta1 <- summary(mod)$coefficients['x',1]
se <-  summary(mod)$coefficients['x',2]
original_tstat <- (mod$coefficients['x']-1)/(se)
original_tstat
# Bootstraping Test
resids <- residuals(mod)
fitted <- fitted(mod)
orig_intercept <- summary(lm((y-x)~1))$coefficients[1,1]
N <- length(y) # Get number of observations
samples <- 20000
tstats <- vector() # Create an empty vector for the t stats
# Boostraping Loop
for (i in seq(1:samples)) {
syntheticY <- orig_intercept + x + sample(resids, N, replace=TRUE) # Create the synthetic y
syntheticY
newmod <- lm(syntheticY~x) # Compute the models
beta1 <- summary(newmod)$coefficients['x',1]
se <-  summary(newmod)$coefficients['x',2]
tstat <- (newmod$coefficients['x']-1)/(se) # Compute the respective t statistics
tstats <- c(tstats, tstat)
}
# Plot the results (CODE VON MAX)
hist(tstats, breaks = (100), xlim = (c(-10,10)))
abline(v = original_tstat, col = "red")
abline(v = sort(tstats)[0.025*samples], col = "blue")
abline(v = sort(tstats)[0.975*samples], col = "blue")
text(x=7.5, y=0.025*samples, labels=paste0("Critical values:\n(",
round(sort(tstats)[0.025*samples], 4),
", ",
round(sort(tstats)[0.975*samples], 4),
")"), col = "blue")
text(x=7.5, y=0.015*samples, labels=paste0("Model t-value:\n(",
round(original_tstat,3),
")"), col = "red")
# Plot the results (CODE VON MAX)
hist(tstats, breaks = (100), xlim = (c(-10,10)))
abline(v = original_tstat, col = "red")
abline(v = sort(tstats)[0.025*samples], col = "blue")
abline(v = sort(tstats)[0.975*samples], col = "blue")
text(x=7.5, y=0.025*samples, labels=paste0("Critical values:\n(",
round(sort(tstats)[0.025*samples], 4),
", ",
round(sort(tstats)[0.975*samples], 4),
")"), col = "blue")
text(x=7.5, y=0.015*samples, labels=paste0("Model t-value:\n(",
round(original_tstat,3),
")"), col = "red")
# Bootstraping Test
resids <- residuals(mod)
fitted <- fitted(mod)
# Bootstraping Test
resids <- residuals(mod)
orig_intercept <- summary(lm((y-x)~1))$coefficients[1,1]
N <- length(y) # Get number of observations
samples <- 20000
tstats <- vector() # Create an empty vector for the t stats
samples <- 10000
tstats <- vector() # Create an empty vector for the t stats
# Boostraping Loop
for (i in seq(1:samples)) {
syntheticY <- orig_intercept + x + sample(resids, N, replace=TRUE) # Create the synthetic y
syntheticY
newmod <- lm(syntheticY~x) # Compute the models
beta1 <- summary(newmod)$coefficients['x',1]
se <-  summary(newmod)$coefficients['x',2]
tstat <- (newmod$coefficients['x']-1)/(se) # Compute the respective t statistics
tstats <- c(tstats, tstat)
}
# Plot the results (CODE VON MAX)
hist(tstats, breaks = (100), xlim = (c(-10,10)))
abline(v = original_tstat, col = "red")
abline(v = sort(tstats)[0.025*samples], col = "blue")
abline(v = sort(tstats)[0.975*samples], col = "blue")
text(x=7.5, y=0.025*samples, labels=paste0("Critical values:\n(",
round(sort(tstats)[0.025*samples], 4),
", ",
round(sort(tstats)[0.975*samples], 4),
")"), col = "blue")
text(x=7.5, y=0.015*samples, labels=paste0("Model t-value:\n(",
round(original_tstat,3),
")"), col = "red")
# Setup
set.seed(11913169)
# Data Intake
y <- c(0.79, 4.8, 4.5, -1.6, 0.6, 5.5, 5.5, -3.9, 0.6, 0.1)
x <- c(3.2, 1.4, 3.8, -2.4, 5.6, 4.5, 5.3, -3.1, 8.2, -0.6)
# Standard t-Test
mod <- lm(y~x)
summary(mod)
beta1 <- summary(mod)$coefficients['x',1]
se <-  summary(mod)$coefficients['x',2]
original_tstat <- (mod$coefficients['x']-1)/(se)
original_tstat
# Bootstraping Test
resids <- residuals(mod)
orig_intercept <- summary(lm((y-x)~1))$coefficients[1,1]
N <- length(y) # Get number of observations
samples <- 10000
samples <- 20000
tstats <- vector() # Create an empty vector for the t stats
# Boostraping Loop
for (i in seq(1:samples)) {
syntheticY <- orig_intercept + x + sample(resids, N, replace=TRUE) # Create the synthetic y
syntheticY
newmod <- lm(syntheticY~x) # Compute the models
beta1 <- summary(newmod)$coefficients['x',1]
se <-  summary(newmod)$coefficients['x',2]
tstat <- (newmod$coefficients['x']-1)/(se) # Compute the respective t statistics
tstats <- c(tstats, tstat)
}
# Plot the results (CODE VON MAX)
hist(tstats, breaks = (100), xlim = (c(-10,10)))
abline(v = original_tstat, col = "red")
abline(v = sort(tstats)[0.025*samples], col = "blue")
abline(v = sort(tstats)[0.975*samples], col = "blue")
text(x=7.5, y=0.025*samples, labels=paste0("Critical values:\n(",
round(sort(tstats)[0.025*samples], 4),
", ",
round(sort(tstats)[0.975*samples], 4),
")"), col = "blue")
text(x=7.5, y=0.015*samples, labels=paste0("Model t-value:\n(",
round(original_tstat,3),
")"), col = "red")
# Setup
library(ggplot2)
# Color vector
my_color= ifelse(my_hist$breaks < -10, rgb(0.2,0.8,0.5,0.5) , ifelse (my_hist$breaks >=10, "purple", rgb(0.2,0.2,0.2,0.2) ))
# Plot the results (CODE VON MAX)
tstat_hist <- hist(tstats, breaks = (100), xlim = (c(-10,10)))
# Color vector
my_color= ifelse(tstat_hist$breaks < sort(tstats)[0.025*samples], rgb(0.2,0.8,0.5,0.5) , ifelse (tstat_hist$breaks >=sort(tstats)[0.975*samples], "purple", rgb(0.2,0.2,0.2,0.2) ))
# Final plot
plot(tstat_hist, col=my_color , border=F , main="" , xlab="value of the variable", xlim=c(-40,40) )
# Final plot
plot(tstat_hist, col=my_color , border=F , main="" , xlab="value of the variable", xlim=c(-10,10) )
# Final plot
plot(tstat_hist, col=my_color , border=F , main="" , xlab="value of the variable", xlim=c(-8,8) )
# Final plot
plot(tstat_hist, col=my_color , border=F , main="" , xlab="value of the bootstrapped t-statistic", xlim=c(-8,8) )
# Final plot
plot(tstat_hist, col=my_color , border=F , main="" , xlab="value of the bootstrapped t-statistic", xlim=c(-10,10) )
abline(v = original_tstat, col = "red")
# Final plot
plot(tstat_hist, col=my_color , border=F , main="" , xlab="value of the bootstrapped t-statistic", xlim=c(-10,10))+
geom_label( aes(x=4.5, y=-0.25, label="variable2"), color="#404080")
# Final plot
plot(tstat_hist, col=my_color , border=F , main="" , xlab="value of the bootstrapped t-statistic", xlim=c(-10,10))+
geom_label( aes(x=4.5, y=-0.25, label="variable2"), color="#404080")
# Final plot
ggplot(tstat_hist, col=my_color , border=F , main="" , xlab="value of the bootstrapped t-statistic", xlim=c(-10,10))+
geom_label( aes(x=4.5, y=-0.25, label="variable2"), color="#404080")
# Final plot
plot(tstat_hist, col=my_color , border=F , main="" , xlab="value of the bootstrapped t-statistic", xlim=c(-10,10))+
# Final plot
plot(tstat_hist, col=my_color , border=F , main="" , xlab="value of the bootstrapped t-statistic", xlim=c(-10,10))
abline(v = original_tstat, col = "red")
text(x=7.5, y=0.025*samples, labels=paste0("Critical values:\n(",
round(sort(tstats)[0.025*samples], 4),
", ",
round(sort(tstats)[0.975*samples], 4),
")"), col = "blue")
text(x=7.5, y=0.015*samples, labels=paste0("Model t-value:\n(",
round(original_tstat,3),
")"), col = "red")
# Color vector
my_color= ifelse(tstat_hist$breaks < sort(tstats)[0.025*samples], rgb(0.2,0.8,0.8,0.5) , ifelse (tstat_hist$breaks >=sort(tstats)[0.975*samples], "purple", rgb(0.2,0.2,0.2,0.2) ))
# Final plot
plot(tstat_hist, col=my_color , border=F , main="" , xlab="value of the bootstrapped t-statistic", xlim=c(-10,10))
# Color vector
my_color= ifelse(tstat_hist$breaks < sort(tstats)[0.025*samples], rgb(0.2,0.8,0.8,0.5) , ifelse (tstat_hist$breaks >=sort(tstats)[0.975*samples], "purple", rgb(0.2,0.8,0.8,0.5) ))
# Final plot
plot(tstat_hist, col=my_color , border=F , main="" , xlab="value of the bootstrapped t-statistic", xlim=c(-10,10))
# Color vector
my_color= ifelse(tstat_hist$breaks < sort(tstats)[0.025*samples], rgb(0.2,0.8,0.8,0.5) , ifelse (tstat_hist$breaks >=sort(tstats)[0.975*samples], "purple", rgb(0.2,0.2,0.2,0.2) ))
# Final plot
plot(tstat_hist, col=my_color , border=F , main="" , xlab="value of the bootstrapped t-statistic", xlim=c(-10,10))
abline(v = original_tstat, col = "red")
# Color vector
my_color= ifelse(tstat_hist$breaks < sort(tstats)[0.025*samples], rgb(0.2,0.8,0.8,0.5) , ifelse (tstat_hist$breaks >=sort(tstats)[0.975*samples], "purple", rgb(0.2,0.8,0.8,0.5) ))
# Final plot
plot(tstat_hist, col=my_color , border=F , main="" , xlab="value of the bootstrapped t-statistic", xlim=c(-10,10))
# Color vector
my_color= ifelse(tstat_hist$breaks < sort(tstats)[0.025*samples], rgb(0.2,0.8,0.8,0.5) , ifelse (tstat_hist$breaks >=sort(tstats)[0.975*samples], rgb(0.2,0.8,0.8,0.5), rgb(0.2,0.2,0.2,0.2) ))
# Final plot
plot(tstat_hist, col=my_color , border=F , main="" , xlab="value of the bootstrapped t-statistic", xlim=c(-10,10))
abline(v = original_tstat, col = "red")
text(x=7.5, y=0.015*samples, labels=paste0("Model t-value:\n(",
round(original_tstat,3),
")"), col = "red")
text(x=-2, y=0.015*samples, labels=paste0("Model t-value:\n(",
round(original_tstat,3),
")"), col = "red")
text(x=-4, y=0.015*samples, labels=paste0("Model t-value:\n(",
round(original_tstat,3),
")"), col = "red")
text(x=-3, y=0.015*samples, labels=paste0("Model t-value:\n(",
round(original_tstat,3),
")"), col = "red")
text(x=-3.5, y=1*samples, labels=paste0("Model t-value:\n(",
round(original_tstat,3),
")"), col = "red")
text(x=-3.5, y=0.095*samples, labels=paste0("Model t-value:\n(",
round(original_tstat,3),
")"), col = "red")
# Final plot
plot(tstat_hist, col=my_color , border=F , main="" , xlab="value of the bootstrapped t-statistic", xlim=c(-10,10))
abline(v = original_tstat, col = "red")
text(x=-3.5, y=0.095*samples, labels=paste0("Model t-value:\n(",
round(original_tstat,3),
")"), col = "red")
text(x=-3.5, y=0.055*samples, labels=paste0("Model t-value:\n(",
round(original_tstat,3),
")"), col = "red")
knitr::opts_chunk$set(echo = TRUE)
require(ggplot2)
require(forecast)
require(lmtest)
require(tidyverse)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
rstudioapi::getActiveDocumentContext()$path
rstudioapi::getActiveDocumentContext()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
dirname(rstudioapi::getActiveDocumentContext()$path)+"\data"
dirname(rstudioapi::getActiveDocumentContext()$path)+"/data"
dirname(rstudioapi::getActiveDocumentContext()$path)
paste(dirname(rstudioapi::getActiveDocumentContext()$path),"/data")
setwd(paste(dirname(rstudioapi::getActiveDocumentContext()$path),"/data"))
setwd(paste(dirname(rstudioapi::getActiveDocumentContext()$path),"/data"))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
dirname(rstudioapi::getActiveDocumentContext()$path)
paste(dirname(rstudioapi::getActiveDocumentContext()$path),"/data")
paste(dirname(rstudioapi::getActiveDocumentContext()$path),"/data", sep="")
setwd(paste(dirname(rstudioapi::getActiveDocumentContext()$path),"/data", sep=""))
getwd()
set("F:/OneDrive/02_Studium/04_Econ_MSc/2-SS_2023/5233_Macro 2 (Rabitsch)/AdvMacroeconomics2_Assignments/data#")
setwd("F:/OneDrive/02_Studium/04_Econ_MSc/2-SS_2023/5233_Macro 2 (Rabitsch)/AdvMacroeconomics2_Assignments/data#")
setwd("F:/OneDrive/02_Studium/04_Econ_MSc/2-SS_2023/5233_Macro 2 (Rabitsch)/AdvMacroeconomics2_Assignments/data")
getwd
require(readxl)
ireland <- read_excel("Ireland_GDPData.xlsx", sheet = 3)
ireland <- read_excel("Ireland_GDPData.xlsx", sheet = 2)
ireland <- read_excel("Ireland_GDPData.xlsx", sheet = 1)
ireland <- read_excel("Ireland_GDPData.xlsx", sheet = 1)
ireland <- read_excel("Ireland_GDPData.xlsx", sheet = 3)
ireland <- read_excel("Ireland_GDPData.xlsx", sheet = 4)
ireland <- read_excel("Ireland_GDPData.xlsx", sheet = 4)
ireland <- read_excel("data/Ireland_GDPData.xlsx", sheet = 4)
ireland <- read_excel("data/Ireland_GDPData.xlsx", sheet = 4)
head(ireland)
require(zoo)
cols(ireland) <- c("t","Y","G","C","I")
columns(ireland) <- c("t","Y","G","C","I")
colnames(ireland) <- c("t","Y","G","C","I")
head(ireland)
new_data <- zoo(ireland$t, ireland$Y,ireland$G,ireland$C,ireland$I)
?zoo
new_data <- zoo(ireland$t, ireland$Y)
new_data
GDP_ts <- ts(GDP, frequency = 4)
GDP <- zoo(ireland$t, ireland$Y)
GDP_ts <- ts(GDP, frequency = 4)
GDP_ts
GDP_ts <- as.ts(GDP)
GDP
as.ts(GDP)
GDP <- ts(ireland$Y, start = 1995.0, frequency = 4)
plot(GDP)
GDP
ggplot(data=GDP, aes(x=Day, y=GPP))
ggplot(data=GDP, aes(x=Day, y=GPP))+geom_line() +labs(y= "Deaths", x = "Day")
ggplot(data=GDP, aes( y=GPP))+geom_line() +labs(y= "Deaths", x = "Day")
ggplot(data=GDP, aes( y=GDP))+geom_line() +labs(y= "Deaths", x = "Day")
autoplot(data=as.zoo(GDP))
autoplot(data=as.zoo(GDP))
autoplot(data=as.zoo(GDP), geom="point")
autoplot(as.zoo(GDP), geom="point")
autoplot(as.zoo(GDP), geom="line")
autoplot(as.zoo(GDP), geom="line")+
geom_line(as.zoo(Y))
autoplot(as.zoo(GDP), geom="line")+
geom_line(as.zoo(C))
autoplot(as.zoo(GDP))+
geom_line(as.zoo(C))
autoplot(as.zoo(GDP))+
geom_line()
options(scipen=10)
autoplot(as.zoo(GDP))+
geom_line()
ireland
ggplot(data = ireland, aes(x=Y, y=t))+
geom_line()
ggplot(data = ireland, aes(y=Y, x=t))+
geom_line()
ggplot(data = ireland, aes(y=Y, x=t))+
geom_line()
ggplot(data = ireland, aes(y=Y))+
geom_line()
seq(112)
ggplot(data = ireland, aes(y=Y, x=seq(112)))+
geom_line()
ggplot(data = ireland, aes(y=c(Y,I), x=seq(112)))+
geom_line()
par(mfrow=c(2,2))
par(mfrow=c(4,1))
plot(GDP)
par(mfrow=c(4,1))
plot(GDP)
plot(GDP,I)
plot()
par(mfrow=c(4,1))
plot(GDP)
plot(C)
par(mfrow=c(4,1))
par(mfrow=c(4,1))
plot(GDP)
par(mfrow=c(4,1))
plot(GDP)
plot(C)
plot(C)
GDP <- ts(ireland$Y, start = 1995.0, frequency = 4)
C <- ts(ireland$C, start = 1995.0, frequency = 4)
I <- ts(ireland$I, start = 1995.0, frequency = 4)
G <- ts(ireland$G, start = 1995.0, frequency = 4)
GDP <- ts(ireland$Y, start = 1995.0, frequency = 4)
C <- ts(ireland$C, start = 1995.0, frequency = 4)
I <- ts(ireland$I, start = 1995.0, frequency = 4)
G <- ts(ireland$G, start = 1995.0, frequency = 4)
par(mfrow=c(4,1))
plot(GDP)
plot(C)
plot(I)
plot(G)
ireland <- read_excel("data/Ireland_GDPData.xlsx", sheet = 4)
colnames(ireland) <- c("t","Y","G","C","I")
head(ireland)
GDP <- ts(ireland$Y, start = 1995.0, frequency = 4)
C <- ts(ireland$C, start = 1995.0, frequency = 4)
I <- ts(ireland$I, start = 1995.0, frequency = 4)
G <- ts(ireland$G, start = 1995.0, frequency = 4)
plot(GDP)
plot(C)
plot(I)
plot(G)
mean_GDP = mean(GDP)
mean(GDP)
mean(GDP)
mean(GDP)
mean(C)
mean(I)
mean(G)
